//includes
#include <ros/ros.h>
#include <std_msgs/Float32>
#include <std_msgs/Byte>

double angle_leg1 = 0.0;
double angle_leg2 = 0.0;
double angle_leg3 = 0.0;
double angle_leg4 = 0.0;

int PWM_leg1 = 0;
int PWM_leg2 = 0;
int PWM_leg3 = 0;
int PWM_leg4 = 0;

ros::Publisher comAngle_pub_leg1;
ros::Publisher comAngle_pub_leg2;
ros::Publisher comAngle_pub_leg3;
ros::Publisher comAngle_pub_leg4;

//callbacks
void angleCallbackLeg1(const std_msgs::Float32::ConstPtr& msg) {
    angle_leg1 = msg->data;
    received_leg1 = true;
}

void angleCallbackLeg2(const std_msgs::Float32::ConstPtr& msg) {
    angle_leg2 = msg->data;
    received_leg2 = true;
}

void angleCallbackLeg3(const std_msgs::Float32::ConstPtr& msg) {
    angle_leg3 = msg->data;
    received_leg3 = true;
}

void angleCallbackLeg4(const std_msgs::Float32::ConstPtr& msg) {
    angle_leg4 = msg->data;
    received_leg4 = true;



//main 
int main(int argc, char **argv) {
	ros::init(argc, argv, "comProc");

//nodehandle
	ros::NodeHandle nh;



//subscribe to angle measurement topics
    ros::Subscriber sub_leg1 = n.subscribe("leg1/numAngle", 1000, angleCallbackLeg1);
    ros::Subscriber sub_leg2 = n.subscribe("leg2/numAngle", 1000, angleCallbackLeg2);
    ros::Subscriber sub_leg3 = n.subscribe("leg3/numAngle", 1000, angleCallbackLeg3);
    ros::Subscriber sub_leg4 = n.subscribe("leg4/numAngle", 1000, angleCallbackLeg4);


//math to translate angle to PWM
//angle_leg1 is a float32 value. We need to convert this to an int and a pwm value that will be an unsigned 8-bit integer.

 long map(long x, long in_min, long in_max, long out_min, long out_max) {
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    }


//create publishers for commanded angle
    comAngle_pub_leg1 = 
nh.advertise<std_msgs::Byte>("leg1/comAngle", 10);
    comAngle_pub_leg2 = nh.advertise<std_msgs::Byte>("leg2/comAngle", 10);
    comAngle_pub_leg3 = nh.advertise<std_msgs::Byte>("leg3/comAngle", 10);
    comAngle_pub_leg4 = nh.advertise<std_msgs::Byte>("leg4/comAngle", 10);


//publish PWM commands
 	comAngle_pub_leg1 = PWM_leg1;
 	comAngle_pub_leg1 = PWM_leg2;
 	comAngle_pub_leg1 = PWM_leg3;
 	comAngle_pub_leg1 = PWM_leg4;
 	ROS_INFO("Published PWM values:", PWM_leg1, PWM_leg2, PWM_leg3, PWM_leg4);
//spin
    ros::spin();

    return 0;

}
